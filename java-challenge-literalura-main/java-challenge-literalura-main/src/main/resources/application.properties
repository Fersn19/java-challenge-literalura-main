spring.application.name=literalura

# Configuracion basica de postgres
#--spring.datasource.url=jdbc:postgresql://localhost:5432/alura_series
#--spring.datasource.username=postgres
#--spring.datasource.password=postgres

#leyendo de una variable de entorno
//spring.datasource.url=jdbc:postgresql://${JAVA_SCREEN_MATCH_DB_HOST}:${JAVA_SCREEN_MATCH_DB_PORT}/${JAVA_SCREEN_MATCH_DB_NAME}
spring.datasource.url=jdbc:postgresql://127.0.0.1:${JAVA_SCREEN_MATCH_DB_PORT}/${JAVA_SCREEN_MATCH_DB_NAME}
spring.datasource.username=${JAVA_SCREEN_MATCH_DB_USR}
spring.datasource.password=${JAVA_SCREEN_MATCH_DB_PASS}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.devtools.add-properties=false
#--spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.HSQLDialect

#identifica si hay un cambio en la APP y si la info es diferente, actualiza la info en la BD. si la tabla no existe, la crea en la BD de postgres
spring.jpa.hibernate.ddl-auto=update

#--ver todas las operaciones realizadas en la base de datos
#-spring.jpa.show-sql=true
#-spring.jpa.format-sql=true

#para tomar el valor de la variable de entorno y sacar el apikey de omdb
#--JAVA_SCREEN_MATCH_OMDB_APIKEY=${JAVA_SCREEN_MATCH_OMDB_APIKEY}

#--En caso de que quieras cambiar de puerto
server.port=8080
#--Por defecto, Spring Boot escucha solo en localhost (127.0.0.1).
#Para que escuche en todas las interfaces de red (incluida la IP del VPN), haz una de estas dos cosas:
server.address=120.0.0.1
#server.address=0.0.0.0
